// <auto-generated />
using System;
using System.Collections.Generic;
using Gamification.Infrastructure.DatabaseService;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Gamification.Infrastructure.Migrations
{
    [DbContext(typeof(ProductivityDbContext))]
    [Migration("20250813105842_BasicSchemas")]
    partial class BasicSchemas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Gamification.Core.Models.AnalysisResult", b =>
                {
                    b.Property<string>("AnalysisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("analysis_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.PrimitiveCollection<List<string>>("Category")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("category");

                    b.Property<int>("IntrinsicScore")
                        .HasColumnType("integer")
                        .HasColumnName("intrinsic_score");

                    b.Property<float>("RelevanceScore")
                        .HasColumnType("real")
                        .HasColumnName("relevance_score");

                    b.Property<string>("SiteId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("site_id");

                    b.Property<string>("UserGoal")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_goal");

                    b.HasKey("AnalysisId")
                        .HasName("pk_analysis_results");

                    b.HasIndex("SiteId", "UserGoal")
                        .IsUnique()
                        .HasDatabaseName("ix_analysis_results_site_id_user_goal");

                    b.ToTable("analysis_results", (string)null);
                });

            modelBuilder.Entity("Gamification.Core.Models.GameStat", b =>
                {
                    b.Property<string>("StatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("stat_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("Coin")
                        .HasColumnType("integer")
                        .HasColumnName("coin");

                    b.Property<float>("ExperiencePoints")
                        .HasColumnType("real")
                        .HasColumnName("experience_points");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("StatId")
                        .HasName("pk_game_stats");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_game_stats_user_id");

                    b.ToTable("game_stats", (string)null);
                });

            modelBuilder.Entity("Gamification.Core.Models.Site", b =>
                {
                    b.Property<string>("SiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("site_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("SiteId")
                        .HasName("pk_sites");

                    b.HasIndex("Url")
                        .IsUnique()
                        .HasDatabaseName("ix_sites_url");

                    b.ToTable("sites", (string)null);
                });

            modelBuilder.Entity("Gamification.Core.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Gamification.Core.Models.UserSiteVisit", b =>
                {
                    b.Property<string>("VisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("visit_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AnalysisId")
                        .HasColumnType("text")
                        .HasColumnName("analysis_id");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_at");

                    b.Property<string>("SiteId")
                        .HasColumnType("text")
                        .HasColumnName("site_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("visit_date");

                    b.HasKey("VisitId")
                        .HasName("pk_user_site_visits");

                    b.HasIndex("AnalysisId")
                        .HasDatabaseName("ix_user_site_visits_analysis_id");

                    b.HasIndex("ProcessedAt")
                        .HasDatabaseName("ix_user_site_visits_processed_at")
                        .HasFilter("\"processed_at\" IS NULL");

                    b.HasIndex("SiteId")
                        .HasDatabaseName("ix_user_site_visits_site_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_site_visits_user_id");

                    b.HasIndex("VisitDate")
                        .HasDatabaseName("ix_user_site_visits_visit_date");

                    b.ToTable("user_site_visits", (string)null);
                });

            modelBuilder.Entity("Gamification.Core.Models.AnalysisResult", b =>
                {
                    b.HasOne("Gamification.Core.Models.Site", "Site")
                        .WithMany("AnalysisResults")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_analysis_results_sites_site_id");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Gamification.Core.Models.GameStat", b =>
                {
                    b.HasOne("Gamification.Core.Models.User", "User")
                        .WithMany("GameStats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_stats_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gamification.Core.Models.UserSiteVisit", b =>
                {
                    b.HasOne("Gamification.Core.Models.AnalysisResult", "Analysis")
                        .WithMany("UserSiteVisit")
                        .HasForeignKey("AnalysisId")
                        .HasConstraintName("fk_user_site_visits_analysis_results_analysis_id");

                    b.HasOne("Gamification.Core.Models.Site", "Site")
                        .WithMany("UserSiteVisits")
                        .HasForeignKey("SiteId")
                        .HasConstraintName("fk_user_site_visits_sites_site_id");

                    b.HasOne("Gamification.Core.Models.User", "User")
                        .WithMany("UserSiteVisits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_site_visits_users_user_id");

                    b.Navigation("Analysis");

                    b.Navigation("Site");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gamification.Core.Models.AnalysisResult", b =>
                {
                    b.Navigation("UserSiteVisit");
                });

            modelBuilder.Entity("Gamification.Core.Models.Site", b =>
                {
                    b.Navigation("AnalysisResults");

                    b.Navigation("UserSiteVisits");
                });

            modelBuilder.Entity("Gamification.Core.Models.User", b =>
                {
                    b.Navigation("GameStats");

                    b.Navigation("UserSiteVisits");
                });
#pragma warning restore 612, 618
        }
    }
}
