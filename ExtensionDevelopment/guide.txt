const API_BASE_URL = "http://localhost:5160/UrlMonitor";
// For production, use your secure HTTPS endpoint:
// const API_BASE_URL = "https://your-api-domain.com/api/UrlMonitor";
// ---------------------

console.log("Site Monitor Extension: Background script started.");

// Store the last reported URL and tab ID to avoid redundant sends
let lastReportedUrl = null;
let lastReportedTabId = null;

// --- Helper function to process and send URL ---
async function processAndSendUrl(url, tabId, eventSource) {
  // Filter out non-http/https URLs
  if (!url || (!url.startsWith('http://') && !url.startsWith('https://'))) {
    return;
  }

  // Avoid sending the same URL for the same tab consecutively
  if (url === lastReportedUrl && tabId === lastReportedTabId) {
    return;
  }

  console.log(`Site Monitor: [${eventSource}] Processing URL: ${url} in tab ${tabId}`);

  const API_ENDPOINT = `${API_BASE_URL}/UrlBrowsed?url=${encodeURIComponent(url) + " type: " + eventSource}`;

  try {
    const response = await fetch(API_ENDPOINT, {
      method: 'GET',
    });

    if (response.ok) {
      console.log(`Site Monitor: Data for ${url} sent successfully.`);
      lastReportedUrl = url; // Update last reported URL
      lastReportedTabId = tabId; // Update last reported tab ID
    } else {
      console.error(`Site Monitor: Failed to send data for ${url}. Status: ${response.status}`);
      // Consider if you want to clear lastReportedUrl/TabId on failure to allow retry
    }
  } catch (error) {
    console.error(`Site Monitor: Error sending data for ${url}:`, error);
    // Consider if you want to clear lastReportedUrl/TabId on failure
  }
}

// --- Event Listeners ---

// 1. Listen for when a navigation is completed (page finished loading)
chrome.webNavigation.onCompleted.addListener((details) => {
  if (details.frameId === 0) { // Main frame
    processAndSendUrl(details.url, details.tabId, "onCompleted");
  }
});

// 2. Listen for history state updates (important for SPAs like Reddit, YouTube, etc.)
chrome.webNavigation.onHistoryStateUpdated.addListener((details) => {
  if (details.frameId === 0) { // Main frame
    // This event fires when the URL changes via history.pushState or history.replaceState
    processAndSendUrl(details.url, details.tabId, "onHistoryStateUpdated");
  }
});

// 3. Listen for when the active tab changes
chrome.tabs.onActivated.addListener(async (activeInfo) => {
  // activeInfo contains tabId and windowId
  try {
    const tab = await chrome.tabs.get(activeInfo.tabId);
    if (tab && tab.url) {
      if (tab.status === "complete" || tab.url !== "chrome://newtab/") { // Avoid sending new tab page immediately
         processAndSendUrl(tab.url, activeInfo.tabId, "onActivated");
      }
    }
  } catch (error) {
    if (!error.message.includes("No tab with id")) { // Don't log common "tab closed" errors
        console.warn(`Site Monitor: Error getting tab info onActivated for tab ${activeInfo.tabId}:`, error);
    }
  }
});

// 5. Listen for when the focused window changes
// chrome.windows.onFocusChanged.addListener(async (windowId) => {
//   if (windowId === chrome.windows.WINDOW_ID_NONE) {
//     // Browser lost focus, do nothing or log "focus lost"
//     // console.log("Site Monitor: Browser window lost focus.");
//     // Potentially clear lastReportedUrl/TabId if you want to re-report when focus returns
//     // lastReportedUrl = null;
//     // lastReportedTabId = null;
//     return;
//   }

//   try {
//     // Get the currently active tab in the newly focused window
//     const [activeTab] = await chrome.tabs.query({ active: true, windowId: windowId });
//     if (activeTab && activeTab.url) {
//       if (activeTab.status === "complete" || activeTab.url !== "chrome://newtab/") {
//         processAndSendUrl(activeTab.url, activeInfo.tabId, "onFocusChanged");
//       }
//     }
//   } catch (error) {
//     console.warn(`Site Monitor: Error getting active tab on window focus change for window ${windowId}:`, error);
//   }
// });


// Optional: Listen for navigation errors
chrome.webNavigation.onErrorOccurred.addListener((details) => {
  if (details.frameId === 0) {
    console.error(`Site Monitor: Navigation error in main frame of tab ${details.tabId} URL: ${details.url}`, details.error);
  }
});

// Optional: Listen for when a tab is removed (closed)
// This could be useful if you want to log the "end" of viewing a page for time tracking.
// For now, we are just logging when a page becomes active/viewed.
// /*
chrome.tabs.onRemoved.addListener((tabId, removeInfo) => {
  console.log(`Site Monitor: Tab ${tabId} was closed.`);
  // If you were tracking time, this is where you'd finalize it.
  // If the closed tab was the last one reported, clear the state
  if (tabId === lastReportedTabId) {
    console.log(`${lastReportedUrl} has been closed`);
    
    lastReportedUrl = null;
    lastReportedTabId = null;
  }
});

chrome.windows.onRemoved.addListener(function(windowid){
  // //Stop the time spent on the url to increase.
  // const api = API_BASE_URL + "/UrlBrowsed?url=stop";
  // fetch(api);
  alert("window closed")
});
// */